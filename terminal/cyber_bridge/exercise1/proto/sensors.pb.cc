// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cyber_bridge/exercise1/proto/sensors.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cyber_bridge/exercise1/proto/sensors.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace sensors {
class ImageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Image> {
} _Image_default_instance_;
class PoseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Pose> {
} _Pose_default_instance_;
class AccDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Acc> {
} _Acc_default_instance_;
class GyroDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Gyro> {
} _Gyro_default_instance_;
class PointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Point> {
} _Point_default_instance_;

namespace protobuf_cyber_5fbridge_2fexercise1_2fproto_2fsensors_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, frame_no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, measurement_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, encoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, step_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, data_),
  2,
  3,
  4,
  5,
  0,
  6,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, frame_no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, rotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, angular_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, angular_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, tracker_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, mapper_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, translation_),
  7,
  2,
  3,
  4,
  5,
  0,
  1,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Acc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Acc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Acc, acc_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gyro, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gyro, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gyro, gyro_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, z_),
  0,
  1,
  2,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 12, sizeof(Image)},
  { 19, 32, sizeof(Pose)},
  { 40, 46, sizeof(Acc)},
  { 47, 53, sizeof(Gyro)},
  { 54, 62, sizeof(Point)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Image_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Pose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Acc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Gyro_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Point_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cyber_bridge/exercise1/proto/sensors.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _Image_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Pose_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Acc_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Gyro_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Point_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Image_default_instance_.DefaultConstruct();
  _Pose_default_instance_.DefaultConstruct();
  _Acc_default_instance_.DefaultConstruct();
  _Gyro_default_instance_.DefaultConstruct();
  _Point_default_instance_.DefaultConstruct();
  _Pose_default_instance_.get_mutable()->velocity_ = const_cast< ::apollo::sensors::Point*>(
      ::apollo::sensors::Point::internal_default_instance());
  _Pose_default_instance_.get_mutable()->rotation_ = const_cast< ::apollo::sensors::Point*>(
      ::apollo::sensors::Point::internal_default_instance());
  _Pose_default_instance_.get_mutable()->angular_velocity_ = const_cast< ::apollo::sensors::Point*>(
      ::apollo::sensors::Point::internal_default_instance());
  _Pose_default_instance_.get_mutable()->angular_acceleration_ = const_cast< ::apollo::sensors::Point*>(
      ::apollo::sensors::Point::internal_default_instance());
  _Pose_default_instance_.get_mutable()->translation_ = const_cast< ::apollo::sensors::Point*>(
      ::apollo::sensors::Point::internal_default_instance());
  _Acc_default_instance_.get_mutable()->acc_ = const_cast< ::apollo::sensors::Point*>(
      ::apollo::sensors::Point::internal_default_instance());
  _Gyro_default_instance_.get_mutable()->gyro_ = const_cast< ::apollo::sensors::Point*>(
      ::apollo::sensors::Point::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n*cyber_bridge/exercise1/proto/sensors.p"
      "roto\022\016apollo.sensors\"\200\001\n\005Image\022\020\n\010frame_"
      "no\030\002 \001(\004\022\030\n\020measurement_time\030\003 \001(\001\022\016\n\006he"
      "ight\030\004 \001(\r\022\r\n\005width\030\005 \001(\r\022\020\n\010encoding\030\006 "
      "\001(\t\022\014\n\004step\030\007 \001(\r\022\014\n\004data\030\010 \001(\014\"\263\002\n\004Pose"
      "\022\020\n\010frame_no\030\001 \001(\004\022\'\n\010velocity\030\002 \001(\0132\025.a"
      "pollo.sensors.Point\022\'\n\010rotation\030\003 \001(\0132\025."
      "apollo.sensors.Point\022/\n\020angular_velocity"
      "\030\004 \001(\0132\025.apollo.sensors.Point\0223\n\024angular"
      "_acceleration\030\005 \001(\0132\025.apollo.sensors.Poi"
      "nt\022\032\n\022tracker_confidence\030\006 \001(\014\022\031\n\021mapper"
      "_confidence\030\007 \001(\014\022*\n\013translation\030\010 \001(\0132\025"
      ".apollo.sensors.Point\")\n\003Acc\022\"\n\003acc\030\001 \001("
      "\0132\025.apollo.sensors.Point\"+\n\004Gyro\022#\n\004gyro"
      "\030\002 \001(\0132\025.apollo.sensors.Point\"(\n\005Point\022\t"
      "\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 631);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cyber_bridge/exercise1/proto/sensors.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cyber_5fbridge_2fexercise1_2fproto_2fsensors_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Image::kFrameNoFieldNumber;
const int Image::kMeasurementTimeFieldNumber;
const int Image::kHeightFieldNumber;
const int Image::kWidthFieldNumber;
const int Image::kEncodingFieldNumber;
const int Image::kStepFieldNumber;
const int Image::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Image::Image()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cyber_5fbridge_2fexercise1_2fproto_2fsensors_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.sensors.Image)
}
Image::Image(const Image& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  encoding_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_encoding()) {
    encoding_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encoding_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&frame_no_, &from.frame_no_,
    reinterpret_cast<char*>(&step_) -
    reinterpret_cast<char*>(&frame_no_) + sizeof(step_));
  // @@protoc_insertion_point(copy_constructor:apollo.sensors.Image)
}

void Image::SharedCtor() {
  _cached_size_ = 0;
  encoding_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&frame_no_, 0, reinterpret_cast<char*>(&step_) -
    reinterpret_cast<char*>(&frame_no_) + sizeof(step_));
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:apollo.sensors.Image)
  SharedDtor();
}

void Image::SharedDtor() {
  encoding_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Image::descriptor() {
  protobuf_cyber_5fbridge_2fexercise1_2fproto_2fsensors_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_5fbridge_2fexercise1_2fproto_2fsensors_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Image& Image::default_instance() {
  protobuf_cyber_5fbridge_2fexercise1_2fproto_2fsensors_2eproto::InitDefaults();
  return *internal_default_instance();
}

Image* Image::New(::google::protobuf::Arena* arena) const {
  Image* n = new Image;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.sensors.Image)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_encoding()) {
      GOOGLE_DCHECK(!encoding_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*encoding_.UnsafeRawStringPointer())->clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 124u) {
    ::memset(&frame_no_, 0, reinterpret_cast<char*>(&step_) -
      reinterpret_cast<char*>(&frame_no_) + sizeof(step_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.sensors.Image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 frame_no = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_frame_no();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &frame_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double measurement_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_measurement_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &measurement_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 width = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string encoding = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encoding()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->encoding().data(), this->encoding().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.sensors.Image.encoding");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 step = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_step();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.sensors.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.sensors.Image)
  return false;
#undef DO_
}

void Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.sensors.Image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 frame_no = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->frame_no(), output);
  }

  // optional double measurement_time = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->measurement_time(), output);
  }

  // optional uint32 height = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->height(), output);
  }

  // optional uint32 width = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->width(), output);
  }

  // optional string encoding = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encoding().data(), this->encoding().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.sensors.Image.encoding");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->encoding(), output);
  }

  // optional uint32 step = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->step(), output);
  }

  // optional bytes data = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.sensors.Image)
}

::google::protobuf::uint8* Image::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.sensors.Image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 frame_no = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->frame_no(), target);
  }

  // optional double measurement_time = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->measurement_time(), target);
  }

  // optional uint32 height = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->height(), target);
  }

  // optional uint32 width = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->width(), target);
  }

  // optional string encoding = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encoding().data(), this->encoding().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.sensors.Image.encoding");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->encoding(), target);
  }

  // optional uint32 step = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->step(), target);
  }

  // optional bytes data = 8;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.sensors.Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.sensors.Image)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string encoding = 6;
    if (has_encoding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->encoding());
    }

    // optional bytes data = 8;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint64 frame_no = 2;
    if (has_frame_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->frame_no());
    }

    // optional double measurement_time = 3;
    if (has_measurement_time()) {
      total_size += 1 + 8;
    }

    // optional uint32 height = 4;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional uint32 width = 5;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 step = 7;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Image::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.sensors.Image)
  GOOGLE_DCHECK_NE(&from, this);
  const Image* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Image>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.sensors.Image)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.sensors.Image)
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.sensors.Image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_encoding();
      encoding_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encoding_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000004u) {
      frame_no_ = from.frame_no_;
    }
    if (cached_has_bits & 0x00000008u) {
      measurement_time_ = from.measurement_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000020u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000040u) {
      step_ = from.step_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Image::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.sensors.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.sensors.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::Swap(Image* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Image::InternalSwap(Image* other) {
  encoding_.Swap(&other->encoding_);
  data_.Swap(&other->data_);
  std::swap(frame_no_, other->frame_no_);
  std::swap(measurement_time_, other->measurement_time_);
  std::swap(height_, other->height_);
  std::swap(width_, other->width_);
  std::swap(step_, other->step_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Image::GetMetadata() const {
  protobuf_cyber_5fbridge_2fexercise1_2fproto_2fsensors_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_5fbridge_2fexercise1_2fproto_2fsensors_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Image

// optional uint64 frame_no = 2;
bool Image::has_frame_no() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Image::set_has_frame_no() {
  _has_bits_[0] |= 0x00000004u;
}
void Image::clear_has_frame_no() {
  _has_bits_[0] &= ~0x00000004u;
}
void Image::clear_frame_no() {
  frame_no_ = GOOGLE_ULONGLONG(0);
  clear_has_frame_no();
}
::google::protobuf::uint64 Image::frame_no() const {
  // @@protoc_insertion_point(field_get:apollo.sensors.Image.frame_no)
  return frame_no_;
}
void Image::set_frame_no(::google::protobuf::uint64 value) {
  set_has_frame_no();
  frame_no_ = value;
  // @@protoc_insertion_point(field_set:apollo.sensors.Image.frame_no)
}

// optional double measurement_time = 3;
bool Image::has_measurement_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Image::set_has_measurement_time() {
  _has_bits_[0] |= 0x00000008u;
}
void Image::clear_has_measurement_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void Image::clear_measurement_time() {
  measurement_time_ = 0;
  clear_has_measurement_time();
}
double Image::measurement_time() const {
  // @@protoc_insertion_point(field_get:apollo.sensors.Image.measurement_time)
  return measurement_time_;
}
void Image::set_measurement_time(double value) {
  set_has_measurement_time();
  measurement_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.sensors.Image.measurement_time)
}

// optional uint32 height = 4;
bool Image::has_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Image::set_has_height() {
  _has_bits_[0] |= 0x00000010u;
}
void Image::clear_has_height() {
  _has_bits_[0] &= ~0x00000010u;
}
void Image::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 Image::height() const {
  // @@protoc_insertion_point(field_get:apollo.sensors.Image.height)
  return height_;
}
void Image::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.sensors.Image.height)
}

// optional uint32 width = 5;
bool Image::has_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Image::set_has_width() {
  _has_bits_[0] |= 0x00000020u;
}
void Image::clear_has_width() {
  _has_bits_[0] &= ~0x00000020u;
}
void Image::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 Image::width() const {
  // @@protoc_insertion_point(field_get:apollo.sensors.Image.width)
  return width_;
}
void Image::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.sensors.Image.width)
}

// optional string encoding = 6;
bool Image::has_encoding() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Image::set_has_encoding() {
  _has_bits_[0] |= 0x00000001u;
}
void Image::clear_has_encoding() {
  _has_bits_[0] &= ~0x00000001u;
}
void Image::clear_encoding() {
  encoding_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_encoding();
}
const ::std::string& Image::encoding() const {
  // @@protoc_insertion_point(field_get:apollo.sensors.Image.encoding)
  return encoding_.GetNoArena();
}
void Image::set_encoding(const ::std::string& value) {
  set_has_encoding();
  encoding_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.sensors.Image.encoding)
}
#if LANG_CXX11
void Image::set_encoding(::std::string&& value) {
  set_has_encoding();
  encoding_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.sensors.Image.encoding)
}
#endif
void Image::set_encoding(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_encoding();
  encoding_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.sensors.Image.encoding)
}
void Image::set_encoding(const char* value, size_t size) {
  set_has_encoding();
  encoding_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.sensors.Image.encoding)
}
::std::string* Image::mutable_encoding() {
  set_has_encoding();
  // @@protoc_insertion_point(field_mutable:apollo.sensors.Image.encoding)
  return encoding_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Image::release_encoding() {
  // @@protoc_insertion_point(field_release:apollo.sensors.Image.encoding)
  clear_has_encoding();
  return encoding_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Image::set_allocated_encoding(::std::string* encoding) {
  if (encoding != NULL) {
    set_has_encoding();
  } else {
    clear_has_encoding();
  }
  encoding_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encoding);
  // @@protoc_insertion_point(field_set_allocated:apollo.sensors.Image.encoding)
}

// optional uint32 step = 7;
bool Image::has_step() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Image::set_has_step() {
  _has_bits_[0] |= 0x00000040u;
}
void Image::clear_has_step() {
  _has_bits_[0] &= ~0x00000040u;
}
void Image::clear_step() {
  step_ = 0u;
  clear_has_step();
}
::google::protobuf::uint32 Image::step() const {
  // @@protoc_insertion_point(field_get:apollo.sensors.Image.step)
  return step_;
}
void Image::set_step(::google::protobuf::uint32 value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:apollo.sensors.Image.step)
}

// optional bytes data = 8;
bool Image::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Image::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void Image::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void Image::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& Image::data() const {
  // @@protoc_insertion_point(field_get:apollo.sensors.Image.data)
  return data_.GetNoArena();
}
void Image::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.sensors.Image.data)
}
#if LANG_CXX11
void Image::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.sensors.Image.data)
}
#endif
void Image::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.sensors.Image.data)
}
void Image::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.sensors.Image.data)
}
::std::string* Image::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:apollo.sensors.Image.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Image::release_data() {
  // @@protoc_insertion_point(field_release:apollo.sensors.Image.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Image::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:apollo.sensors.Image.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pose::kFrameNoFieldNumber;
const int Pose::kVelocityFieldNumber;
const int Pose::kRotationFieldNumber;
const int Pose::kAngularVelocityFieldNumber;
const int Pose::kAngularAccelerationFieldNumber;
const int Pose::kTrackerConfidenceFieldNumber;
const int Pose::kMapperConfidenceFieldNumber;
const int Pose::kTranslationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pose::Pose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cyber_5fbridge_2fexercise1_2fproto_2fsensors_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.sensors.Pose)
}
Pose::Pose(const Pose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tracker_confidence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tracker_confidence()) {
    tracker_confidence_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tracker_confidence_);
  }
  mapper_confidence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mapper_confidence()) {
    mapper_confidence_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mapper_confidence_);
  }
  if (from.has_velocity()) {
    velocity_ = new ::apollo::sensors::Point(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  if (from.has_rotation()) {
    rotation_ = new ::apollo::sensors::Point(*from.rotation_);
  } else {
    rotation_ = NULL;
  }
  if (from.has_angular_velocity()) {
    angular_velocity_ = new ::apollo::sensors::Point(*from.angular_velocity_);
  } else {
    angular_velocity_ = NULL;
  }
  if (from.has_angular_acceleration()) {
    angular_acceleration_ = new ::apollo::sensors::Point(*from.angular_acceleration_);
  } else {
    angular_acceleration_ = NULL;
  }
  if (from.has_translation()) {
    translation_ = new ::apollo::sensors::Point(*from.translation_);
  } else {
    translation_ = NULL;
  }
  frame_no_ = from.frame_no_;
  // @@protoc_insertion_point(copy_constructor:apollo.sensors.Pose)
}

void Pose::SharedCtor() {
  _cached_size_ = 0;
  tracker_confidence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapper_confidence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&velocity_, 0, reinterpret_cast<char*>(&frame_no_) -
    reinterpret_cast<char*>(&velocity_) + sizeof(frame_no_));
}

Pose::~Pose() {
  // @@protoc_insertion_point(destructor:apollo.sensors.Pose)
  SharedDtor();
}

void Pose::SharedDtor() {
  tracker_confidence_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapper_confidence_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete velocity_;
  }
  if (this != internal_default_instance()) {
    delete rotation_;
  }
  if (this != internal_default_instance()) {
    delete angular_velocity_;
  }
  if (this != internal_default_instance()) {
    delete angular_acceleration_;
  }
  if (this != internal_default_instance()) {
    delete translation_;
  }
}

void Pose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pose::descriptor() {
  protobuf_cyber_5fbridge_2fexercise1_2fproto_2fsensors_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_5fbridge_2fexercise1_2fproto_2fsensors_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Pose& Pose::default_instance() {
  protobuf_cyber_5fbridge_2fexercise1_2fproto_2fsensors_2eproto::InitDefaults();
  return *internal_default_instance();
}

Pose* Pose::New(::google::protobuf::Arena* arena) const {
  Pose* n = new Pose;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.sensors.Pose)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_tracker_confidence()) {
      GOOGLE_DCHECK(!tracker_confidence_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tracker_confidence_.UnsafeRawStringPointer())->clear();
    }
    if (has_mapper_confidence()) {
      GOOGLE_DCHECK(!mapper_confidence_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mapper_confidence_.UnsafeRawStringPointer())->clear();
    }
    if (has_velocity()) {
      GOOGLE_DCHECK(velocity_ != NULL);
      velocity_->::apollo::sensors::Point::Clear();
    }
    if (has_rotation()) {
      GOOGLE_DCHECK(rotation_ != NULL);
      rotation_->::apollo::sensors::Point::Clear();
    }
    if (has_angular_velocity()) {
      GOOGLE_DCHECK(angular_velocity_ != NULL);
      angular_velocity_->::apollo::sensors::Point::Clear();
    }
    if (has_angular_acceleration()) {
      GOOGLE_DCHECK(angular_acceleration_ != NULL);
      angular_acceleration_->::apollo::sensors::Point::Clear();
    }
    if (has_translation()) {
      GOOGLE_DCHECK(translation_ != NULL);
      translation_->::apollo::sensors::Point::Clear();
    }
  }
  frame_no_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Pose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.sensors.Pose)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 frame_no = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_frame_no();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &frame_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.sensors.Point velocity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.sensors.Point rotation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.sensors.Point angular_velocity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.sensors.Point angular_acceleration = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes tracker_confidence = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tracker_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes mapper_confidence = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mapper_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.sensors.Point translation = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.sensors.Pose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.sensors.Pose)
  return false;
#undef DO_
}

void Pose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.sensors.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 frame_no = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->frame_no(), output);
  }

  // optional .apollo.sensors.Point velocity = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->velocity_, output);
  }

  // optional .apollo.sensors.Point rotation = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->rotation_, output);
  }

  // optional .apollo.sensors.Point angular_velocity = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->angular_velocity_, output);
  }

  // optional .apollo.sensors.Point angular_acceleration = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->angular_acceleration_, output);
  }

  // optional bytes tracker_confidence = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->tracker_confidence(), output);
  }

  // optional bytes mapper_confidence = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->mapper_confidence(), output);
  }

  // optional .apollo.sensors.Point translation = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->translation_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.sensors.Pose)
}

::google::protobuf::uint8* Pose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.sensors.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 frame_no = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->frame_no(), target);
  }

  // optional .apollo.sensors.Point velocity = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->velocity_, deterministic, target);
  }

  // optional .apollo.sensors.Point rotation = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->rotation_, deterministic, target);
  }

  // optional .apollo.sensors.Point angular_velocity = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->angular_velocity_, deterministic, target);
  }

  // optional .apollo.sensors.Point angular_acceleration = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->angular_acceleration_, deterministic, target);
  }

  // optional bytes tracker_confidence = 6;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->tracker_confidence(), target);
  }

  // optional bytes mapper_confidence = 7;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->mapper_confidence(), target);
  }

  // optional .apollo.sensors.Point translation = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->translation_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.sensors.Pose)
  return target;
}

size_t Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.sensors.Pose)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes tracker_confidence = 6;
    if (has_tracker_confidence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tracker_confidence());
    }

    // optional bytes mapper_confidence = 7;
    if (has_mapper_confidence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mapper_confidence());
    }

    // optional .apollo.sensors.Point velocity = 2;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->velocity_);
    }

    // optional .apollo.sensors.Point rotation = 3;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rotation_);
    }

    // optional .apollo.sensors.Point angular_velocity = 4;
    if (has_angular_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->angular_velocity_);
    }

    // optional .apollo.sensors.Point angular_acceleration = 5;
    if (has_angular_acceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->angular_acceleration_);
    }

    // optional .apollo.sensors.Point translation = 8;
    if (has_translation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->translation_);
    }

    // optional uint64 frame_no = 1;
    if (has_frame_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->frame_no());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.sensors.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  const Pose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.sensors.Pose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.sensors.Pose)
    MergeFrom(*source);
  }
}

void Pose::MergeFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.sensors.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tracker_confidence();
      tracker_confidence_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tracker_confidence_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_mapper_confidence();
      mapper_confidence_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mapper_confidence_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_velocity()->::apollo::sensors::Point::MergeFrom(from.velocity());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_rotation()->::apollo::sensors::Point::MergeFrom(from.rotation());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_angular_velocity()->::apollo::sensors::Point::MergeFrom(from.angular_velocity());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_angular_acceleration()->::apollo::sensors::Point::MergeFrom(from.angular_acceleration());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_translation()->::apollo::sensors::Point::MergeFrom(from.translation());
    }
    if (cached_has_bits & 0x00000080u) {
      frame_no_ = from.frame_no_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Pose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.sensors.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.sensors.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose::IsInitialized() const {
  return true;
}

void Pose::Swap(Pose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pose::InternalSwap(Pose* other) {
  tracker_confidence_.Swap(&other->tracker_confidence_);
  mapper_confidence_.Swap(&other->mapper_confidence_);
  std::swap(velocity_, other->velocity_);
  std::swap(rotation_, other->rotation_);
  std::swap(angular_velocity_, other->angular_velocity_);
  std::swap(angular_acceleration_, other->angular_acceleration_);
  std::swap(translation_, other->translation_);
  std::swap(frame_no_, other->frame_no_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pose::GetMetadata() const {
  protobuf_cyber_5fbridge_2fexercise1_2fproto_2fsensors_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_5fbridge_2fexercise1_2fproto_2fsensors_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pose

// optional uint64 frame_no = 1;
bool Pose::has_frame_no() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Pose::set_has_frame_no() {
  _has_bits_[0] |= 0x00000080u;
}
void Pose::clear_has_frame_no() {
  _has_bits_[0] &= ~0x00000080u;
}
void Pose::clear_frame_no() {
  frame_no_ = GOOGLE_ULONGLONG(0);
  clear_has_frame_no();
}
::google::protobuf::uint64 Pose::frame_no() const {
  // @@protoc_insertion_point(field_get:apollo.sensors.Pose.frame_no)
  return frame_no_;
}
void Pose::set_frame_no(::google::protobuf::uint64 value) {
  set_has_frame_no();
  frame_no_ = value;
  // @@protoc_insertion_point(field_set:apollo.sensors.Pose.frame_no)
}

// optional .apollo.sensors.Point velocity = 2;
bool Pose::has_velocity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Pose::set_has_velocity() {
  _has_bits_[0] |= 0x00000004u;
}
void Pose::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000004u;
}
void Pose::clear_velocity() {
  if (velocity_ != NULL) velocity_->::apollo::sensors::Point::Clear();
  clear_has_velocity();
}
const ::apollo::sensors::Point& Pose::velocity() const {
  // @@protoc_insertion_point(field_get:apollo.sensors.Pose.velocity)
  return velocity_ != NULL ? *velocity_
                         : *::apollo::sensors::Point::internal_default_instance();
}
::apollo::sensors::Point* Pose::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::apollo::sensors::Point;
  }
  // @@protoc_insertion_point(field_mutable:apollo.sensors.Pose.velocity)
  return velocity_;
}
::apollo::sensors::Point* Pose::release_velocity() {
  // @@protoc_insertion_point(field_release:apollo.sensors.Pose.velocity)
  clear_has_velocity();
  ::apollo::sensors::Point* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
void Pose::set_allocated_velocity(::apollo::sensors::Point* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.sensors.Pose.velocity)
}

// optional .apollo.sensors.Point rotation = 3;
bool Pose::has_rotation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Pose::set_has_rotation() {
  _has_bits_[0] |= 0x00000008u;
}
void Pose::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000008u;
}
void Pose::clear_rotation() {
  if (rotation_ != NULL) rotation_->::apollo::sensors::Point::Clear();
  clear_has_rotation();
}
const ::apollo::sensors::Point& Pose::rotation() const {
  // @@protoc_insertion_point(field_get:apollo.sensors.Pose.rotation)
  return rotation_ != NULL ? *rotation_
                         : *::apollo::sensors::Point::internal_default_instance();
}
::apollo::sensors::Point* Pose::mutable_rotation() {
  set_has_rotation();
  if (rotation_ == NULL) {
    rotation_ = new ::apollo::sensors::Point;
  }
  // @@protoc_insertion_point(field_mutable:apollo.sensors.Pose.rotation)
  return rotation_;
}
::apollo::sensors::Point* Pose::release_rotation() {
  // @@protoc_insertion_point(field_release:apollo.sensors.Pose.rotation)
  clear_has_rotation();
  ::apollo::sensors::Point* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
void Pose::set_allocated_rotation(::apollo::sensors::Point* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    set_has_rotation();
  } else {
    clear_has_rotation();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.sensors.Pose.rotation)
}

// optional .apollo.sensors.Point angular_velocity = 4;
bool Pose::has_angular_velocity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Pose::set_has_angular_velocity() {
  _has_bits_[0] |= 0x00000010u;
}
void Pose::clear_has_angular_velocity() {
  _has_bits_[0] &= ~0x00000010u;
}
void Pose::clear_angular_velocity() {
  if (angular_velocity_ != NULL) angular_velocity_->::apollo::sensors::Point::Clear();
  clear_has_angular_velocity();
}
const ::apollo::sensors::Point& Pose::angular_velocity() const {
  // @@protoc_insertion_point(field_get:apollo.sensors.Pose.angular_velocity)
  return angular_velocity_ != NULL ? *angular_velocity_
                         : *::apollo::sensors::Point::internal_default_instance();
}
::apollo::sensors::Point* Pose::mutable_angular_velocity() {
  set_has_angular_velocity();
  if (angular_velocity_ == NULL) {
    angular_velocity_ = new ::apollo::sensors::Point;
  }
  // @@protoc_insertion_point(field_mutable:apollo.sensors.Pose.angular_velocity)
  return angular_velocity_;
}
::apollo::sensors::Point* Pose::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:apollo.sensors.Pose.angular_velocity)
  clear_has_angular_velocity();
  ::apollo::sensors::Point* temp = angular_velocity_;
  angular_velocity_ = NULL;
  return temp;
}
void Pose::set_allocated_angular_velocity(::apollo::sensors::Point* angular_velocity) {
  delete angular_velocity_;
  angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    set_has_angular_velocity();
  } else {
    clear_has_angular_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.sensors.Pose.angular_velocity)
}

// optional .apollo.sensors.Point angular_acceleration = 5;
bool Pose::has_angular_acceleration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Pose::set_has_angular_acceleration() {
  _has_bits_[0] |= 0x00000020u;
}
void Pose::clear_has_angular_acceleration() {
  _has_bits_[0] &= ~0x00000020u;
}
void Pose::clear_angular_acceleration() {
  if (angular_acceleration_ != NULL) angular_acceleration_->::apollo::sensors::Point::Clear();
  clear_has_angular_acceleration();
}
const ::apollo::sensors::Point& Pose::angular_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.sensors.Pose.angular_acceleration)
  return angular_acceleration_ != NULL ? *angular_acceleration_
                         : *::apollo::sensors::Point::internal_default_instance();
}
::apollo::sensors::Point* Pose::mutable_angular_acceleration() {
  set_has_angular_acceleration();
  if (angular_acceleration_ == NULL) {
    angular_acceleration_ = new ::apollo::sensors::Point;
  }
  // @@protoc_insertion_point(field_mutable:apollo.sensors.Pose.angular_acceleration)
  return angular_acceleration_;
}
::apollo::sensors::Point* Pose::release_angular_acceleration() {
  // @@protoc_insertion_point(field_release:apollo.sensors.Pose.angular_acceleration)
  clear_has_angular_acceleration();
  ::apollo::sensors::Point* temp = angular_acceleration_;
  angular_acceleration_ = NULL;
  return temp;
}
void Pose::set_allocated_angular_acceleration(::apollo::sensors::Point* angular_acceleration) {
  delete angular_acceleration_;
  angular_acceleration_ = angular_acceleration;
  if (angular_acceleration) {
    set_has_angular_acceleration();
  } else {
    clear_has_angular_acceleration();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.sensors.Pose.angular_acceleration)
}

// optional bytes tracker_confidence = 6;
bool Pose::has_tracker_confidence() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Pose::set_has_tracker_confidence() {
  _has_bits_[0] |= 0x00000001u;
}
void Pose::clear_has_tracker_confidence() {
  _has_bits_[0] &= ~0x00000001u;
}
void Pose::clear_tracker_confidence() {
  tracker_confidence_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tracker_confidence();
}
const ::std::string& Pose::tracker_confidence() const {
  // @@protoc_insertion_point(field_get:apollo.sensors.Pose.tracker_confidence)
  return tracker_confidence_.GetNoArena();
}
void Pose::set_tracker_confidence(const ::std::string& value) {
  set_has_tracker_confidence();
  tracker_confidence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.sensors.Pose.tracker_confidence)
}
#if LANG_CXX11
void Pose::set_tracker_confidence(::std::string&& value) {
  set_has_tracker_confidence();
  tracker_confidence_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.sensors.Pose.tracker_confidence)
}
#endif
void Pose::set_tracker_confidence(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tracker_confidence();
  tracker_confidence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.sensors.Pose.tracker_confidence)
}
void Pose::set_tracker_confidence(const void* value, size_t size) {
  set_has_tracker_confidence();
  tracker_confidence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.sensors.Pose.tracker_confidence)
}
::std::string* Pose::mutable_tracker_confidence() {
  set_has_tracker_confidence();
  // @@protoc_insertion_point(field_mutable:apollo.sensors.Pose.tracker_confidence)
  return tracker_confidence_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Pose::release_tracker_confidence() {
  // @@protoc_insertion_point(field_release:apollo.sensors.Pose.tracker_confidence)
  clear_has_tracker_confidence();
  return tracker_confidence_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Pose::set_allocated_tracker_confidence(::std::string* tracker_confidence) {
  if (tracker_confidence != NULL) {
    set_has_tracker_confidence();
  } else {
    clear_has_tracker_confidence();
  }
  tracker_confidence_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tracker_confidence);
  // @@protoc_insertion_point(field_set_allocated:apollo.sensors.Pose.tracker_confidence)
}

// optional bytes mapper_confidence = 7;
bool Pose::has_mapper_confidence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Pose::set_has_mapper_confidence() {
  _has_bits_[0] |= 0x00000002u;
}
void Pose::clear_has_mapper_confidence() {
  _has_bits_[0] &= ~0x00000002u;
}
void Pose::clear_mapper_confidence() {
  mapper_confidence_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mapper_confidence();
}
const ::std::string& Pose::mapper_confidence() const {
  // @@protoc_insertion_point(field_get:apollo.sensors.Pose.mapper_confidence)
  return mapper_confidence_.GetNoArena();
}
void Pose::set_mapper_confidence(const ::std::string& value) {
  set_has_mapper_confidence();
  mapper_confidence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.sensors.Pose.mapper_confidence)
}
#if LANG_CXX11
void Pose::set_mapper_confidence(::std::string&& value) {
  set_has_mapper_confidence();
  mapper_confidence_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.sensors.Pose.mapper_confidence)
}
#endif
void Pose::set_mapper_confidence(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mapper_confidence();
  mapper_confidence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.sensors.Pose.mapper_confidence)
}
void Pose::set_mapper_confidence(const void* value, size_t size) {
  set_has_mapper_confidence();
  mapper_confidence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.sensors.Pose.mapper_confidence)
}
::std::string* Pose::mutable_mapper_confidence() {
  set_has_mapper_confidence();
  // @@protoc_insertion_point(field_mutable:apollo.sensors.Pose.mapper_confidence)
  return mapper_confidence_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Pose::release_mapper_confidence() {
  // @@protoc_insertion_point(field_release:apollo.sensors.Pose.mapper_confidence)
  clear_has_mapper_confidence();
  return mapper_confidence_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Pose::set_allocated_mapper_confidence(::std::string* mapper_confidence) {
  if (mapper_confidence != NULL) {
    set_has_mapper_confidence();
  } else {
    clear_has_mapper_confidence();
  }
  mapper_confidence_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mapper_confidence);
  // @@protoc_insertion_point(field_set_allocated:apollo.sensors.Pose.mapper_confidence)
}

// optional .apollo.sensors.Point translation = 8;
bool Pose::has_translation() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Pose::set_has_translation() {
  _has_bits_[0] |= 0x00000040u;
}
void Pose::clear_has_translation() {
  _has_bits_[0] &= ~0x00000040u;
}
void Pose::clear_translation() {
  if (translation_ != NULL) translation_->::apollo::sensors::Point::Clear();
  clear_has_translation();
}
const ::apollo::sensors::Point& Pose::translation() const {
  // @@protoc_insertion_point(field_get:apollo.sensors.Pose.translation)
  return translation_ != NULL ? *translation_
                         : *::apollo::sensors::Point::internal_default_instance();
}
::apollo::sensors::Point* Pose::mutable_translation() {
  set_has_translation();
  if (translation_ == NULL) {
    translation_ = new ::apollo::sensors::Point;
  }
  // @@protoc_insertion_point(field_mutable:apollo.sensors.Pose.translation)
  return translation_;
}
::apollo::sensors::Point* Pose::release_translation() {
  // @@protoc_insertion_point(field_release:apollo.sensors.Pose.translation)
  clear_has_translation();
  ::apollo::sensors::Point* temp = translation_;
  translation_ = NULL;
  return temp;
}
void Pose::set_allocated_translation(::apollo::sensors::Point* translation) {
  delete translation_;
  translation_ = translation;
  if (translation) {
    set_has_translation();
  } else {
    clear_has_translation();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.sensors.Pose.translation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Acc::kAccFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Acc::Acc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cyber_5fbridge_2fexercise1_2fproto_2fsensors_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.sensors.Acc)
}
Acc::Acc(const Acc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_acc()) {
    acc_ = new ::apollo::sensors::Point(*from.acc_);
  } else {
    acc_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.sensors.Acc)
}

void Acc::SharedCtor() {
  _cached_size_ = 0;
  acc_ = NULL;
}

Acc::~Acc() {
  // @@protoc_insertion_point(destructor:apollo.sensors.Acc)
  SharedDtor();
}

void Acc::SharedDtor() {
  if (this != internal_default_instance()) {
    delete acc_;
  }
}

void Acc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Acc::descriptor() {
  protobuf_cyber_5fbridge_2fexercise1_2fproto_2fsensors_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_5fbridge_2fexercise1_2fproto_2fsensors_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Acc& Acc::default_instance() {
  protobuf_cyber_5fbridge_2fexercise1_2fproto_2fsensors_2eproto::InitDefaults();
  return *internal_default_instance();
}

Acc* Acc::New(::google::protobuf::Arena* arena) const {
  Acc* n = new Acc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Acc::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.sensors.Acc)
  if (has_acc()) {
    GOOGLE_DCHECK(acc_ != NULL);
    acc_->::apollo::sensors::Point::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Acc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.sensors.Acc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.sensors.Point acc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.sensors.Acc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.sensors.Acc)
  return false;
#undef DO_
}

void Acc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.sensors.Acc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.sensors.Point acc = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->acc_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.sensors.Acc)
}

::google::protobuf::uint8* Acc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.sensors.Acc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.sensors.Point acc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->acc_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.sensors.Acc)
  return target;
}

size_t Acc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.sensors.Acc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .apollo.sensors.Point acc = 1;
  if (has_acc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->acc_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Acc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.sensors.Acc)
  GOOGLE_DCHECK_NE(&from, this);
  const Acc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Acc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.sensors.Acc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.sensors.Acc)
    MergeFrom(*source);
  }
}

void Acc::MergeFrom(const Acc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.sensors.Acc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_acc()) {
    mutable_acc()->::apollo::sensors::Point::MergeFrom(from.acc());
  }
}

void Acc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.sensors.Acc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Acc::CopyFrom(const Acc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.sensors.Acc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Acc::IsInitialized() const {
  return true;
}

void Acc::Swap(Acc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Acc::InternalSwap(Acc* other) {
  std::swap(acc_, other->acc_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Acc::GetMetadata() const {
  protobuf_cyber_5fbridge_2fexercise1_2fproto_2fsensors_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_5fbridge_2fexercise1_2fproto_2fsensors_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Acc

// optional .apollo.sensors.Point acc = 1;
bool Acc::has_acc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Acc::set_has_acc() {
  _has_bits_[0] |= 0x00000001u;
}
void Acc::clear_has_acc() {
  _has_bits_[0] &= ~0x00000001u;
}
void Acc::clear_acc() {
  if (acc_ != NULL) acc_->::apollo::sensors::Point::Clear();
  clear_has_acc();
}
const ::apollo::sensors::Point& Acc::acc() const {
  // @@protoc_insertion_point(field_get:apollo.sensors.Acc.acc)
  return acc_ != NULL ? *acc_
                         : *::apollo::sensors::Point::internal_default_instance();
}
::apollo::sensors::Point* Acc::mutable_acc() {
  set_has_acc();
  if (acc_ == NULL) {
    acc_ = new ::apollo::sensors::Point;
  }
  // @@protoc_insertion_point(field_mutable:apollo.sensors.Acc.acc)
  return acc_;
}
::apollo::sensors::Point* Acc::release_acc() {
  // @@protoc_insertion_point(field_release:apollo.sensors.Acc.acc)
  clear_has_acc();
  ::apollo::sensors::Point* temp = acc_;
  acc_ = NULL;
  return temp;
}
void Acc::set_allocated_acc(::apollo::sensors::Point* acc) {
  delete acc_;
  acc_ = acc;
  if (acc) {
    set_has_acc();
  } else {
    clear_has_acc();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.sensors.Acc.acc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gyro::kGyroFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gyro::Gyro()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cyber_5fbridge_2fexercise1_2fproto_2fsensors_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.sensors.Gyro)
}
Gyro::Gyro(const Gyro& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_gyro()) {
    gyro_ = new ::apollo::sensors::Point(*from.gyro_);
  } else {
    gyro_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.sensors.Gyro)
}

void Gyro::SharedCtor() {
  _cached_size_ = 0;
  gyro_ = NULL;
}

Gyro::~Gyro() {
  // @@protoc_insertion_point(destructor:apollo.sensors.Gyro)
  SharedDtor();
}

void Gyro::SharedDtor() {
  if (this != internal_default_instance()) {
    delete gyro_;
  }
}

void Gyro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gyro::descriptor() {
  protobuf_cyber_5fbridge_2fexercise1_2fproto_2fsensors_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_5fbridge_2fexercise1_2fproto_2fsensors_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gyro& Gyro::default_instance() {
  protobuf_cyber_5fbridge_2fexercise1_2fproto_2fsensors_2eproto::InitDefaults();
  return *internal_default_instance();
}

Gyro* Gyro::New(::google::protobuf::Arena* arena) const {
  Gyro* n = new Gyro;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gyro::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.sensors.Gyro)
  if (has_gyro()) {
    GOOGLE_DCHECK(gyro_ != NULL);
    gyro_->::apollo::sensors::Point::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Gyro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.sensors.Gyro)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.sensors.Point gyro = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gyro()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.sensors.Gyro)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.sensors.Gyro)
  return false;
#undef DO_
}

void Gyro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.sensors.Gyro)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.sensors.Point gyro = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->gyro_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.sensors.Gyro)
}

::google::protobuf::uint8* Gyro::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.sensors.Gyro)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.sensors.Point gyro = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->gyro_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.sensors.Gyro)
  return target;
}

size_t Gyro::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.sensors.Gyro)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .apollo.sensors.Point gyro = 2;
  if (has_gyro()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gyro_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gyro::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.sensors.Gyro)
  GOOGLE_DCHECK_NE(&from, this);
  const Gyro* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gyro>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.sensors.Gyro)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.sensors.Gyro)
    MergeFrom(*source);
  }
}

void Gyro::MergeFrom(const Gyro& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.sensors.Gyro)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gyro()) {
    mutable_gyro()->::apollo::sensors::Point::MergeFrom(from.gyro());
  }
}

void Gyro::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.sensors.Gyro)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gyro::CopyFrom(const Gyro& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.sensors.Gyro)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gyro::IsInitialized() const {
  return true;
}

void Gyro::Swap(Gyro* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gyro::InternalSwap(Gyro* other) {
  std::swap(gyro_, other->gyro_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gyro::GetMetadata() const {
  protobuf_cyber_5fbridge_2fexercise1_2fproto_2fsensors_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_5fbridge_2fexercise1_2fproto_2fsensors_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Gyro

// optional .apollo.sensors.Point gyro = 2;
bool Gyro::has_gyro() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Gyro::set_has_gyro() {
  _has_bits_[0] |= 0x00000001u;
}
void Gyro::clear_has_gyro() {
  _has_bits_[0] &= ~0x00000001u;
}
void Gyro::clear_gyro() {
  if (gyro_ != NULL) gyro_->::apollo::sensors::Point::Clear();
  clear_has_gyro();
}
const ::apollo::sensors::Point& Gyro::gyro() const {
  // @@protoc_insertion_point(field_get:apollo.sensors.Gyro.gyro)
  return gyro_ != NULL ? *gyro_
                         : *::apollo::sensors::Point::internal_default_instance();
}
::apollo::sensors::Point* Gyro::mutable_gyro() {
  set_has_gyro();
  if (gyro_ == NULL) {
    gyro_ = new ::apollo::sensors::Point;
  }
  // @@protoc_insertion_point(field_mutable:apollo.sensors.Gyro.gyro)
  return gyro_;
}
::apollo::sensors::Point* Gyro::release_gyro() {
  // @@protoc_insertion_point(field_release:apollo.sensors.Gyro.gyro)
  clear_has_gyro();
  ::apollo::sensors::Point* temp = gyro_;
  gyro_ = NULL;
  return temp;
}
void Gyro::set_allocated_gyro(::apollo::sensors::Point* gyro) {
  delete gyro_;
  gyro_ = gyro;
  if (gyro) {
    set_has_gyro();
  } else {
    clear_has_gyro();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.sensors.Gyro.gyro)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
const int Point::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cyber_5fbridge_2fexercise1_2fproto_2fsensors_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.sensors.Point)
}
Point::Point(const Point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:apollo.sensors.Point)
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:apollo.sensors.Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_cyber_5fbridge_2fexercise1_2fproto_2fsensors_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_5fbridge_2fexercise1_2fproto_2fsensors_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point& Point::default_instance() {
  protobuf_cyber_5fbridge_2fexercise1_2fproto_2fsensors_2eproto::InitDefaults();
  return *internal_default_instance();
}

Point* Point::New(::google::protobuf::Arena* arena) const {
  Point* n = new Point;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.sensors.Point)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.sensors.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.sensors.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.sensors.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.sensors.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.sensors.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.sensors.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.sensors.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.sensors.Point)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.sensors.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.sensors.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.sensors.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.sensors.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.sensors.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.sensors.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_cyber_5fbridge_2fexercise1_2fproto_2fsensors_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_5fbridge_2fexercise1_2fproto_2fsensors_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point

// optional double x = 1;
bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
double Point::x() const {
  // @@protoc_insertion_point(field_get:apollo.sensors.Point.x)
  return x_;
}
void Point::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:apollo.sensors.Point.x)
}

// optional double y = 2;
bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
double Point::y() const {
  // @@protoc_insertion_point(field_get:apollo.sensors.Point.y)
  return y_;
}
void Point::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:apollo.sensors.Point.y)
}

// optional double z = 3;
bool Point::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Point::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Point::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Point::clear_z() {
  z_ = 0;
  clear_has_z();
}
double Point::z() const {
  // @@protoc_insertion_point(field_get:apollo.sensors.Point.z)
  return z_;
}
void Point::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:apollo.sensors.Point.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sensors
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
